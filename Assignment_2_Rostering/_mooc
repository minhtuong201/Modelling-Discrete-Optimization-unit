{
    "assignmentKey": "c2QGQWR1FM",
    "history": {
        "files": {
            "models/nroster.mzn": {
                "changes": [
                ],
                "snapshot": "% nurse rostering project\n% STAGE A data\nenum NURSE; % set of nurses to roster\nenum SHIFT = { MORN, DAY, EVEN, NIGH, OFF };\nint: nday;     % number of days for roster\nset of int: DAYS = 1..nday; \narray[NURSE,DAYS] of bool: rostered_off; % nurse is guaranteed an off shift\n% STAGE B data\nint: maxweek; % maximum working shifts in any 7 day period\nint: maxnightfort; % maximum night shifts in any 14 day period\nint: minfort; % minimum number of working shifts in any 14 day period\narray[SHIFT,DAYS] of int: minshift; % minimum number of nurses rostered on each shift\n% STAGE C data\narray[NURSE] of int: shift_cost;  \n% STAGE D data\nenum WARD;  % set of wards to roster\nWARD: dummy; % dummy ward\narray[WARD,DAYS] of int: minward; % minimum number of nurses rostered to each ward\nconstraint forall(d in DAYS)(assert(minward[dummy,d] = 0, \"Dummy ward has non zero minimum on day \\(d)\\n\"));\nint: maxward; % maximum number of wards any nurse can work in the roster period\n% STAGE E data\nenum SKILL;\nSKILL: senior;                         % which skill is senior\narray[NURSE] of set of SKILL: skill;   % skills that each nurse has\narray[WARD] of set of SKILL: required; % particular skills for each ward\nopt WARD: emergency; % emergency ward if its being rostered\nenum SLICE = { PREDAWN, AM, PM, LATE };\n% coverage MORNING = {PREDAWN, AM}, \n%          DAY = {AM,PM} \n%          EVENING = {PM, LATE}, \n%          NIGHT {LATE, PREDAWN of the next day} \n\n%%%% DECISIONS\narray[NURSE,DAYS] of var SHIFT: sh; % shift for each nurse on each day\nvar 0..nday*sum(shift_cost): total_cost;\narray[NURSE,DAYS] of var WARD: wd; % ward rostered for each nurse\n\n% --- Stage A\n% A1\ninclude \"globals.mzn\";\nconstraint forall(n in NURSE, i in DAYS) (\n\t\t\t\t\t\t\t\t% ward = OFF if rostered_off is true\n\t\t\t\t\t\t\t\t rostered_off[n, i] = true -> sh[n, i] = OFF\n);\n\n% A2:\nconstraint forall(n in NURSE) (\n\t\t\t\t\t\t\t\t% 10 states, 5 actions, start from state 1, end from 2 to 10\n\t\t\t\t\t\t\t\tregular([sh[n, i] | i in DAYS], 10, 5, transition, 1, 2..10) \n\n);\narray[1..10, SHIFT] of 0..10: transition = \n% Action (headings) = next day, work in:  MORN, DAY, EVEN, NIGH, OFF \n% State (columns) = after choose action:  START, MORN, DAY1, DAY2, EVEN, NIGH1, NIGH2, NIGH3, OFF1, OFF2\n[|2,3,5,6,9 % START ->  MORN, DAY1, EVEN, NIGH1, OFF1 (go everywhere)\n|2,3,5,6,9  % MORN  ->  MORN, DAY1, EVEN, NIGH1, OFF1 (go everywhere)\n|0,4,0,0,0  % DAY1  ->  DAY2 (must 2 day in a row <=> must pick action DAY)\n|2,4,5,6,9  % DAY2  ->  MORN, DAY2, EVEN, NIGH1, OFF1 (go everywhere)\n|0,3,5,6,9  % EVEN  ->  DAY1, EVEN, NIGH1, OFF1 (can not pick MORN)\n|0,0,5,7,9\t  % NIGH1 ->  EVEN, NIGH2, OFF1 (can not pick MORN and DAY)\n|0,0,5,8,9  % NIGH2 ->  EVEN, NIGH3, OFF1 (can not pick MORN and DAY)\n|0,0,5,0,9  % NIGH3 ->  EVEN, OFF1 (can not pick MORN, DAY; can not have >= 3 NIGH in a row)\n|2,3,5,6,10 % OFF1  ->  MORN, DAY1, EVEN, NIGH1, OFF2 (go everywhere)\n|2,3,5,6,0  % OFF1  ->  MORN, DAY1, EVEN, NIGH1 (cannot have > 2 OFF)\n|];\n\n% -- Stage B\n% B1 \narray[SHIFT, DAYS] of var 0..card(NURSE): cnt_shift; % Counting number of nurse rostered to a particular shift in a day\nconstraint forall(d in DAYS) (global_cardinality(sh[..,d], SHIFT, cnt_shift[..,d]));\nconstraint forall(d in DAYS, shift in SHIFT) (\n\t\t\t\t\t\t\t\tcnt_shift[shift, d] >= minshift[shift, d]\n);\n\n% B2\nconstraint forall(n in NURSE) (\n% sliding sum (low, up, sequence, array): sum all '1' in a sequence of 0/1 array. The total must be in a range (low, up)\n\t\t\t\t\t\t\t\tsliding_sum(0, maxweek, 7, [sh[n,i] != OFF | i in DAYS]) /\\    % in 7 continous days, nurse works <= maxweek days\n\t\t\t\t\t\t\t\tsliding_sum(minfort, 14, 14, [sh[n,i] != OFF | i in DAYS]) /\\  % in 14 continous days, nurse works >= minfort days\n\t\t\t\t\t\t\t\tsliding_sum(0, maxnightfort, 14, [sh[n,i] = NIGH | i in DAYS]) % in 14 continous days, nurse works in NIGH <= maxnightfort\n);\n\n% -- Stage C\n\nconstraint total_cost = sum(n in NURSE) (\n\t\t\t\t\t\t(sum(day in DAYS) (sh[n, day] != OFF)) * shift_cost[n] % shift works * cost per shift\n);\nsolve minimize total_cost;\n\n%-- Stage D\n% D0: no work <=> no ward\nconstraint forall(n in NURSE, d in DAYS) (\n\t\t\t\t\t\t\t\tsh[n, d] = OFF <-> wd[n, d] = dummy\n);\n\n% D1\narray [WARD, DAYS] of var 0..card(NURSE): cnt_ward; % counting number of nurse for a ward and day\nconstraint forall(d in DAYS) (\n\t\t\t\t\t\t\t\tglobal_cardinality(wd[..,d], WARD, cnt_ward[..,d])\n);\nconstraint forall(d in DAYS, w in WARD) (\n\t\t\t\t\t\t\t\tcnt_ward[w, d] >= minward[w, d]\t\t\t\t\t\t\t\n);\n\n% D2\n% nvalue(wd[n,..]) count number of different ward per nurse\nconstraint forall(n in NURSE) (\n\t\t\t\t\t\t\t\tnvalue(wd[n,..]) <= maxward\n);\n\n%-- Stage E\n% E1\nconstraint forall(d in DAYS, w in WARD)(\n\t\t\t\t\t\t\tcnt_ward[w,d] > 0 -> \t\t\t\t% at least 1 nurse in that ward\n\t\t\t\t\t\t\t\t\tforall(s in required[w])(  \n\t\t\t\t\t\t\t\t\t\t\t\texists(n in NURSE)(wd[n,d] = w /\\ s in skill[n])\t % then all skills must be covered\n\t\t\t\t\t\t\t\t\t)\t\t\t\t\t\t\t\t\t\n);\n\n% E2\nconstraint forall(d in DAYS)(\n\t\t\t\t\t\t\t\t% pair of SHIFT which cover each SLICE, e.g. either NIGH (yesterday) or MORN can cover PREDAWN (today)\n\t\t\t\t\t\t\t\texists(n in NURSE)(senior in skill[n] /\\ ((sh[n,d-1] = NIGH) \\/ (sh[n,d] = MORN))) /\\ % PREDAWN\n\t\t\t\t\t\t\t\texists(n in NURSE)(senior in skill[n] /\\ ((sh[n,d] = MORN) \\/ (sh[n,d] = DAY))) /\\    % AM\n\t\t\t\t\t\t\t\texists(n in NURSE)(senior in skill[n] /\\ ((sh[n,d] = DAY) \\/ (sh[n,d] = EVEN))) /\\    % PM\n\t\t\t\t\t\t\t\texists(n in NURSE)(senior in skill[n] /\\ ((sh[n,d] = EVEN) \\/ (sh[n,d] = NIGH)))      % LATE\n);\n\n% E3\nconstraint occurs(emergency) -> (\n\t\t\t\t\t\t\t\tforall(d in DAYS) (\n\t\t\t\t\t\t\t\t\t\t\tcnt_ward[emergency, d] = 0 \\/ (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcnt_ward[emergency, d] >= 4 /\\ ( % only except 0 or >= 4 emergencies per day (NO 1, 2, 3)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texists(n in NURSE)(wd[n,d] = emergency /\\ sh[n,d] = MORN) /\\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texists(n in NURSE)(wd[n,d] = emergency /\\ sh[n,d] = DAY) /\\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texists(n in NURSE)(wd[n,d] = emergency /\\ sh[n,d] = EVEN) /\\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texists(n in NURSE)(wd[n,d] = emergency /\\ sh[n,d] = NIGH) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\t\n \t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n);\n"
            }
        },
        "parent": "2f0aae79-9e36-4a50-8e81-f26a66d233a4",
        "uuid": "c2c0b29a-39a8-4f83-8cbf-e72997a9409c"
    },
    "modelAssignments": [
        {
            "id": "Jo5NoFv6uP",
            "model": "models/nroster.mzn",
            "name": "Nroster Model 1"
        }
    ],
    "moocName": "FIT5216 S1 2024",
    "moocPasswordString": "Submission token",
    "name": "Assignment 2 Rostering",
    "sendMeta": true,
    "solutionAssignments": [
        {
            "data": "data/nroster01.dzn",
            "id": "nS7XGZTCOF",
            "model": "models/nroster.mzn",
            "name": "Nroster 01",
            "timeout": "30"
        },
        {
            "data": "data/nroster04.dzn",
            "id": "RTIZIAYhIA",
            "model": "models/nroster.mzn",
            "name": "Nroster 04",
            "timeout": "30"
        },
        {
            "data": "data/nroster05.dzn",
            "id": "NOQLz5DmMf",
            "model": "models/nroster.mzn",
            "name": "Nroster 05",
            "timeout": "30"
        },
        {
            "data": "data/nroster06.dzn",
            "id": "KYGMfITU20",
            "model": "models/nroster.mzn",
            "name": "Nroster 06",
            "timeout": "60"
        },
        {
            "data": "data/nroster07.dzn",
            "id": "8EVvVCiubE",
            "model": "models/nroster.mzn",
            "name": "Nroster 07",
            "timeout": "60"
        },
        {
            "data": "data/nroster08.dzn",
            "id": "aQnqLph9Uv",
            "model": "models/nroster.mzn",
            "name": "Nroster 08",
            "timeout": "60"
        },
        {
            "data": "data/nroster09.dzn",
            "id": "RBMh0qZHJm",
            "model": "models/nroster.mzn",
            "name": "Nroster 09",
            "timeout": "60"
        },
        {
            "data": "data/nroster10.dzn",
            "id": "wUIpWQqdoO",
            "model": "models/nroster.mzn",
            "name": "Nroster 10",
            "timeout": "60"
        }
    ],
    "submissionTerms": "This is an individual assignment. Your submission has to be entirely your own work. We will use similarity detection software to detect any attempt at collusion, and the penalties are quite harsh. If in doubt, contact your teaching team with any questions! You may not use large language models such as ChatGPT for any part of this assignment",
    "submissionURL": "https://autograder.optimisation-2020.cloud.edu.au/api/index.php"
}
